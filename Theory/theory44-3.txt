44-3 controlled and uncontrolled ways to collect form data
===========================================================
3. Controlled Component.One per each field  use state on change of the field.
 useful to dynamically handle error...

 handle all controlled fieldon one state object....
 const [formData, setFormData] = useState({
    name: '',
    password: '',
    phone: '',
 })

uncontrolled using useRef


controlledField.jsx---->>>
line-15
setPassword(e.target.value);
line-6
const [error, setError] = useState('');

line-17 and 11
if(password.length <6){
            setError('Password Must Be 6 Characters or Longer')
        }
        else{
            setError('');
        }
line-32
<p><small>{error}</small></p>
------------------------->>>
react.dev -->>>doc--->>>Refference-->>>Hooks--->useRef

==================>>>>uncontrolledField.jsx
import React, { useRef } from 'react';

const UnControlledField = () => {

    const emailRef = useRef('');
    const passwordRef = useRef('');

    const handleSubmit = (e)=>{
        e.preventDefault();
        console.log('Submitted');
        // console.log(emailRef);
        console.log(emailRef.current.value);
        const email = emailRef.current.value;
        const password = passwordRef.current.value;
        console.log(email,password)
    }
    return (
        <div>
            <form onSubmit={handleSubmit}>
                <input ref={emailRef} type="email" name="" /> <br/>
                <input ref={passwordRef} type="password" name="" /> <br/>
                <input type="submit" value="Submit" /> <br/>
            </form>
        </div>
    );
};

export default UnControlledField;
